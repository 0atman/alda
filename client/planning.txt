	commands:
		start/up = start the server
			* validate that host is localhost (alda servers cannot be started remotely)
			* check for connection
				* if server already up, print "alda server already up" and exit 0
			* print "starting alda server..."
				* fork new alda server process in the background
					* pass in pre-/post-buffer and stock arguments
				* repeatedly check for connection until established (w/ timeout)
			* print "server up (check)"

		stop/down = stop the server
			* check for connection
				* if down, print "no alda server running" and exit 0
			* print "stopping alda server..."
				* get /stop
				* repeatedly check for lack of connection until established (w/ timeout)
			* print "server down (check)"

		status = returns whether the server is up
			* check for connection
			* print "server down (x)" or "server up (check)"

		version = display the version of the alda server
			* get /version
			* print error if server down or status != 200
			* print body (== alda server version)

		play = evaluate and play alda code
			* validate that only one of "file" or "code" supplied
			* method = "put" if replace, "post" otherwise
			* method /play, send code or file
			* print error if error or status != 200
			* print "playing file" or "playing code"

		score = display the score in progress
			* validate text/lisp/map arguments (there can be only one, or default: text)
			* print error if error or status != 200
			* print body

		new/delete = delete the score and start a new one
			TODO (requires server work):
				* check to see if score is non-empty
				* ask for confirmation before deleting
			* delete /score
			* print error if error or status != 200
			* print body

		parse = display the result of parsing alda code
			* validate that only one of "file" or "code" supplied
			* validate lisp/map arguments (there can be only one, or default: lisp)
			* pass code/file to the appropriate /parse endpoint

